import logging
import os
import re
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (Application, CommandHandler, MessageHandler, 
                         ConversationHandler, CallbackContext, ContextTypes)
from telegram.ext import filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

ADMIN_CHAT_ID = "1079922982"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(CITY, CAR_BRAND, CAR_MODEL, CAR_YEAR, VIN_OR_STS, VIN_TEXT, ENGINE_VOLUME, ENGINE_FUEL,
 PART_MAIN, PART_REFINEMENT, PART_SPECIFICS, PART_PHOTO, MORE_PARTS, 
 CONTACT_INFO, CONFIRMATION, EDIT_CHOICE) = range(16)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
user_reminders = {}

class Database:
    def save_order(self, order_data):
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        try:
            order_data['order_id'] = int(datetime.now().timestamp())
            order_data['created_at'] = datetime.now().isoformat()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
            logger.info(f"üì¶ –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_data['order_id']}")
            logger.info(f"üìç –ì–æ—Ä–æ–¥: {order_data['city']}")
            logger.info(f"üöó –ê–≤—Ç–æ: {order_data['car_brand']} {order_data['car_model']} {order_data['car_year']}")
            
            if not order_data.get('vin_skipped', True):
                if order_data.get('vin_text'):
                    logger.info(f"üî¢ –í–ò–ù/–°–¢–°: {order_data['vin_text']}")
                elif order_data.get('vin_photo'):
                    logger.info(f"üî¢ –í–ò–ù/–°–¢–°: üì∑ (–µ—Å—Ç—å —Ñ–æ—Ç–æ)")
            else:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ data, —Ç–µ–ø–µ—Ä—å order_data
                logger.info(f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {order_data.get('engine_volume', '')} {order_data.get('fuel_type', '')}")
            
            logger.info(f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {order_data['contact_name']} {order_data['contact_phone']}")
            logger.info(f"üîß –ó–∞–ø—á–∞—Å—Ç–∏: {len(order_data['parts'])} —à—Ç.")
            
            for i, part in enumerate(order_data['parts'], 1):
                logger.info(f"  {i}. {part['name']} - {part.get('details', '')}")
            
            logger.info("=" * 50)
            return order_data['order_id']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

db = Database()

async def start(update: Update, context: CallbackContext):
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    if user_id in user_reminders:
        for task in user_reminders[user_id]:
            task.cancel()
        del user_reminders[user_id]
    
    context.user_data.clear()
    
    welcome_text = """
üîß *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ–ó–∞–ø—á–∞—Å—Ç–∏ 24/7!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏. 
–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è —Å–æ–±–µ—Ä—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞.

*–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?*
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await schedule_reminders(update, context)
    
    return CITY

async def schedule_reminders(update: Update, context: CallbackContext):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if user_id not in user_reminders:
        user_reminders[user_id] = []
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    task_30min = asyncio.create_task(
        send_reminder(context, user_id, chat_id, 30*60, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.")
    )
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤
    task_6hours = asyncio.create_task(
        send_reminder(context, user_id, chat_id, 6*60*60, "üïí –í—ã –Ω–∞—á–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏ 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –±—ã—Å—Ç—Ä–µ–µ!")
    )
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
    task_12hours = asyncio.create_task(
        send_reminder(context, user_id, chat_id, 12*60*60, "üìÖ –ü—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏. –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏!")
    )
    
    user_reminders[user_id].extend([task_30min, task_6hours, task_12hours])

async def send_reminder(context: CallbackContext, user_id: int, chat_id: int, delay: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await asyncio.sleep(delay)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—è–≤–∫—É
        if user_id in user_reminders:
            await context.bot.send_message(chat_id=chat_id, text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def get_city(update: Update, context: CallbackContext):
    context.user_data['city'] = update.message.text
    if context.user_data.get('editing'):
        del context.user_data['editing']
        return await show_summary(update, context)
    else:
        await update.message.reply_text(f"üìç *–ì–æ—Ä–æ–¥: {update.message.text}*\n\n–£–∫–∞–∂–∏—Ç–µ *–º–∞—Ä–∫—É* –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", parse_mode='Markdown')
        return CAR_BRAND

async def get_car_brand(update: Update, context: CallbackContext):
    context.user_data['car_brand'] = update.message.text
    if context.user_data.get('editing'):
        del context.user_data['editing']
        return await show_summary(update, context)
    else:
        await update.message.reply_text(f"üöó *–ú–∞—Ä–∫–∞: {update.message.text}*\n\n–£–∫–∞–∂–∏—Ç–µ *–º–æ–¥–µ–ª—å*:", parse_mode='Markdown')
        return CAR_MODEL

async def get_car_model(update: Update, context: CallbackContext):
    context.user_data['car_model'] = update.message.text
    if context.user_data.get('editing'):
        del context.user_data['editing']
        return await show_summary(update, context)
    else:
        await update.message.reply_text(f"üöô *–ú–æ–¥–µ–ª—å: {update.message.text}*\n\n–£–∫–∞–∂–∏—Ç–µ *–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞*:", parse_mode='Markdown')
        return CAR_YEAR

async def get_car_year(update: Update, context: CallbackContext):
    year = update.message.text
    if not year.isdigit() or int(year) < 1950 or int(year) > 2030:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2018):")
        return CAR_YEAR
        
    context.user_data['car_year'] = year
    if context.user_data.get('editing'):
        del context.user_data['editing']
        return await show_summary(update, context)
    else:
        keyboard = [
            ['üìù –í–≤–µ—Å—Ç–∏ –≤–∏–Ω/—Å—Ç—Å –≤—Ä—É—á–Ω—É—é', 'üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –≤–∏–Ω/—Å—Ç—Å'],
            ['üöÄ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
        ]
        
        text = "üî¢ *–£–∫–∞–∂–∏—Ç–µ –≤–∏–Ω –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Å*\n\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–µ–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏. –ú–æ–∂–Ω–æ:"
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return VIN_OR_STS

async def handle_vin_choice(update: Update, context: CallbackContext):
    choice = update.message.text
    
    if choice == 'üìù –í–≤–µ—Å—Ç–∏ –≤–∏–Ω/—Å—Ç—Å –≤—Ä—É—á–Ω—É—é':
        await update.message.reply_text(
            "üî¢ *–í–≤–µ–¥–∏—Ç–µ –≤–∏–Ω –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Å:*",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        return VIN_TEXT
    elif choice == 'üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –≤–∏–Ω/—Å—Ç—Å':
        await update.message.reply_text(
            "üì∑ *–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∏–Ω –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å—Ç—Å:*",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        return VIN_OR_STS
    else:  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        context.user_data['vin_skipped'] = True
        keyboard = [['1.0', '1.5', '1.6', '1.8'], ['2.0', '2.2', '2.5', '3.0'], ['üìù –î—Ä—É–≥–æ–π –æ–±—ä–µ–º']]
        await update.message.reply_text(
            "‚öôÔ∏è *–ö–∞–∫–æ–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è?* (–≤ –ª–∏—Ç—Ä–∞—Ö)",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return ENGINE_VOLUME

async def get_vin_text(update: Update, context: CallbackContext):
    context.user_data['vin_text'] = update.message.text
    context.user_data['vin_skipped'] = False
    if context.user_data.get('editing'):
        del context.user_data['editing']
        return await show_summary(update, context)
    else:
        return await ask_parts(update, context)

async def handle_vin_photo(update: Update, context: CallbackContext):
    if update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        context.user_data['vin_photo'] = photo_file.file_id
        context.user_data['vin_skipped'] = False
        if context.user_data.get('editing'):
            del context.user_data['editing']
            return await show_summary(update, context)
        else:
            return await ask_parts(update, context)
    else:
        await update.message.reply_text("üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∏–Ω/—Å—Ç—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é")
        return VIN_OR_STS

async def get_engine_volume(update: Update, context: CallbackContext):
    if update.message.text == 'üìù –î—Ä—É–≥–æ–π –æ–±—ä–µ–º':
        await update.message.reply_text("‚öôÔ∏è *–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:* (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.4 –∏–ª–∏ 2.0)", 
                                      parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        return ENGINE_VOLUME
    else:
        context.user_data['engine_volume'] = update.message.text
        if context.user_data.get('editing'):
            del context.user_data['editing']
            return await show_summary(update, context)
        else:
            keyboard = [['‚õΩ –ë–µ–Ω–∑–∏–Ω', '‚õΩ –î–∏–∑–µ–ª—å'], ['‚ö° –ì–∏–±—Ä–∏–¥', 'üîã –≠–ª–µ–∫—Ç—Ä–æ']]
            await update.message.reply_text(
                "‚õΩ *–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞?*",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
            return ENGINE_FUEL

async def get_fuel_type(update: Update, context: CallbackContext):
    context.user_data['fuel_type'] = update.message.text
    if context.user_data.get('editing'):
        del context.user_data['editing']
        return await show_summary(update, context)
    else:
        return await ask_parts(update, context)

async def ask_parts(update: Update, context: CallbackContext):
    context.user_data['parts'] = []
    
    text = """
üîß *–£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å:*

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏
‚Ä¢ –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π
‚Ä¢ –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä
‚Ä¢ –õ–æ–±–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ
‚Ä¢ *–õ—é–±–∞—è –¥—Ä—É–≥–∞—è –∑–∞–ø—á–∞—Å—Ç—å*

*–ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ?*"""
    
    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
    return PART_MAIN

async def get_part_main(update: Update, context: CallbackContext):
    context.user_data['current_part'] = {'name': update.message.text, 'details': ''}
    
    keyboard = [
        ['‚úÖ –ó–Ω–∞—é –∞—Ä—Ç–∏–∫—É–ª/–º–æ–¥–µ–ª—å', 'üöó –ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'],
        ['üìã –ï—Å—Ç—å —Ñ–æ—Ç–æ/–∫–∞—Ç–∞–ª–æ–∂–Ω—ã–π –Ω–æ–º–µ—Ä', '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
    ]
    
    text = f"üîß *–ó–∞–ø—á–∞—Å—Ç—å: {update.message.text}*\n\n*–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å?*"
    await update.message.reply_text(
        text, 
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return PART_REFINEMENT

async def handle_part_refinement(update: Update, context: CallbackContext):
    choice = update.message.text
    
    if choice == '‚úÖ –ó–Ω–∞—é –∞—Ä—Ç–∏–∫—É–ª/–º–æ–¥–µ–ª—å':
        text = "üî¢ *–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –º–æ–¥–µ–ª—å –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–∂–Ω—ã–π –Ω–æ–º–µ—Ä:*"
        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        return PART_SPECIFICS
    elif choice == 'üöó –ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è':
        context.user_data['current_part']['details'] = '–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞'
        return await ask_part_photo(update, context)
    elif choice == 'üìã –ï—Å—Ç—å —Ñ–æ—Ç–æ/–∫–∞—Ç–∞–ª–æ–∂–Ω—ã–π –Ω–æ–º–µ—Ä':
        text = "üìé *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –∫–∞—Ç–∞–ª–æ–∂–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç:*"
        await update.message.reply_text(text, parse_mode='Markdown')
        return PART_PHOTO
    else:  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        context.user_data['current_part']['details'] = '–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π'
        context.user_data['parts'].append(context.user_data['current_part'])
        return await ask_more_parts(update, context)

async def get_part_specifics(update: Update, context: CallbackContext):
    context.user_data['current_part']['details'] = update.message.text
    return await ask_part_photo(update, context)

async def ask_part_photo(update: Update, context: CallbackContext):
    keyboard = [['üì∑ –ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ'], ['üöÄ –ë–µ–∑ —Ñ–æ—Ç–æ']]
    
    part_info = f"*{context.user_data['current_part']['name']}*"
    if context.user_data['current_part']['details'] and context.user_data['current_part']['details'] != '–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π':
        part_info += f"\n*–î–µ—Ç–∞–ª–∏:* {context.user_data['current_part']['details']}"
    
    text = f"üîß *–ó–∞–ø—á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:*\n{part_info}\n\nüì∑ *–ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–∏?*"
    await update.message.reply_text(
        text,
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return PART_PHOTO

async def handle_part_photo(update: Update, context: CallbackContext):
    if update.message.text == 'üöÄ –ë–µ–∑ —Ñ–æ—Ç–æ':
        context.user_data['parts'].append(context.user_data['current_part'])
        return await ask_more_parts(update, context)
    elif update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        context.user_data['current_part']['photo'] = photo_file.file_id
        context.user_data['parts'].append(context.user_data['current_part'])
        return await ask_more_parts(update, context)
    else:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
        return PART_PHOTO

async def ask_more_parts(update: Update, context: CallbackContext):
    keyboard = [['‚úÖ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ'], ['‚ùå –≠—Ç–æ –≤—Å–µ']]
    count = len(context.user_data['parts'])
    await update.message.reply_text(
        f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ {count} –∑–∞–ø—á–∞—Å—Ç–µ–π\n\n–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", 
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return MORE_PARTS

async def handle_more_parts(update: Update, context: CallbackContext):
    if update.message.text == '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ':
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø—á–∞—Å—Ç—å:", reply_markup=ReplyKeyboardRemove())
        return PART_MAIN
    else:
        if context.user_data.get('editing'):
            del context.user_data['editing']
            return await show_summary(update, context)
        else:
            await update.message.reply_text(
                "üìã –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n*–ò–º—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n–ü—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω +79165133244*", 
                parse_mode='Markdown', 
                reply_markup=ReplyKeyboardRemove()
            )
            return CONTACT_INFO

async def get_contact_info(update: Update, context: CallbackContext):
    try:
        parts = update.message.text.strip().split()
        
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω +79165133244*", parse_mode='Markdown')
            return CONTACT_INFO
        
        name = ' '.join(parts[:-1])
        phone = parts[-1]
        
        phone_clean = re.sub(r'[^\d+]', '', phone)
        
        if not re.match(r'^(\+7|8)\d{10}$', phone_clean):
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79165133244 –∏–ª–∏ 89165133244", parse_mode='Markdown')
            return CONTACT_INFO
        
        if phone_clean.startswith('8'):
            phone_clean = '+7' + phone_clean[1:]
        elif not phone_clean.startswith('+7'):
            phone_clean = '+7' + phone_clean
        
        context.user_data['contact_name'] = name
        context.user_data['contact_phone'] = phone_clean
        if context.user_data.get('editing'):
            del context.user_data['editing']
            return await show_summary(update, context)
        else:
            return await show_summary(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω +79165133244*", parse_mode='Markdown')
        return CONTACT_INFO

async def show_summary(update: Update, context: CallbackContext):
    data = context.user_data
    text = f"üìã *–°–í–û–î–ö–ê –ó–ê–ö–ê–ó–ê*\n\nüìç *–ì–æ—Ä–æ–¥:* {data['city']}\nüöó *–ê–≤—Ç–æ:* {data['car_brand']} {data['car_model']} {data['car_year']}\n"
    
    if not data.get('vin_skipped', True):
        if data.get('vin_text'):
            text += f"üî¢ *–≤–∏–Ω/—Å—Ç—Å:* {data['vin_text']}\n"
        elif data.get('vin_photo'):
            text += f"üî¢ *–≤–∏–Ω/—Å—Ç—Å:* üì∑ (–µ—Å—Ç—å —Ñ–æ—Ç–æ)\n"
    else:
        text += f"‚öôÔ∏è *–î–≤–∏–≥–∞—Ç–µ–ª—å:* {data.get('engine_volume', '')} {data.get('fuel_type', '')}\n"
    
    text += f"üë§ *–ö–æ–Ω—Ç–∞–∫—Ç:* {data['contact_name']}, {data['contact_phone']}\n\nüîß *–ó–ê–ü–ß–ê–°–¢–ò:*"
    
    for i, part in enumerate(data['parts'], 1):
        text += f"\n{i}. *{part['name']}*"
        if part['details'] and part['details'] != '–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π':
            text += f"\n   –î–µ—Ç–∞–ª–∏: {part['details']}"
        if part.get('photo'):
            text += " üì∑"
    
    keyboard = [['üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'], ['‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å']]
    await update.message.reply_text(
        text, 
        parse_mode='Markdown', 
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return CONFIRMATION

async def handle_confirmation(update: Update, context: CallbackContext):
    if update.message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É':
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        user_id = update.effective_user.id
        if user_id in user_reminders:
            for task in user_reminders[user_id]:
                task.cancel()
            del user_reminders[user_id]
        
        # –°–æ–∑–¥–∞–µ–º ID –∑–∞—è–≤–∫–∏
        order_id = int(datetime.now().timestamp())
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_text = f"üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{order_id}\n"
            admin_text += f"üìç –ì–æ—Ä–æ–¥: {context.user_data['city']}\n"
            admin_text += f"üöó –ê–≤—Ç–æ: {context.user_data['car_brand']} {context.user_data['car_model']} {context.user_data['car_year']}\n"
            
            if not context.user_data.get('vin_skipped', True):
                if context.user_data.get('vin_text'):
                    admin_text += f"üî¢ –≤–∏–Ω/—Å—Ç—Å: {context.user_data['vin_text']}\n"
                elif context.user_data.get('vin_photo'):
                    admin_text += f"üî¢ –≤–∏–Ω/—Å—Ç—Å: üì∑ (—Ñ–æ—Ç–æ –Ω–∏–∂–µ)\n"
            else:
                admin_text += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {context.user_data.get('engine_volume', '')} {context.user_data.get('fuel_type', '')}\n"
            
            admin_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {context.user_data['contact_name']}\n"
            admin_text += f"üìû –¢–µ–ª: {context.user_data['contact_phone']}\n\n"
            admin_text += "üîß –ó–ê–ü–†–û–®–ï–ù–ù–´–ï –ó–ê–ü–ß–ê–°–¢–ò:\n"
            
            for i, part in enumerate(context.user_data['parts'], 1):
                admin_text += f"\n{i}. {part['name']}"
                if part['details'] and part['details'] != '–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π':
                    admin_text += f"\n   –î–µ—Ç–∞–ª–∏: {part['details']}"
                if part.get('photo'):
                    admin_text += " üì∑"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text)
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –≤–∏–Ω/—Å—Ç—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            if context.user_data.get('vin_photo'):
                await context.bot.send_photo(
                    chat_id=ADMIN_CHAT_ID,
                    photo=context.user_data['vin_photo'],
                    caption=f"üÜî –§–æ—Ç–æ –≤–∏–Ω/—Å—Ç—Å –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}"
                )
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
            for i, part in enumerate(context.user_data['parts'], 1):
                if part.get('photo'):
                    await context.bot.send_photo(
                        chat_id=ADMIN_CHAT_ID,
                        photo=part['photo'],
                        caption=f"üîß –§–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}\n{part['name']}"
                    )
            
            await update.message.reply_text(
                f"üéâ *–ó–ê–Ø–í–ö–ê #{order_id} –ü–†–ò–ù–Ø–¢–ê!*\n\n‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!", 
                parse_mode='Markdown', 
                reply_markup=ReplyKeyboardRemove()
            )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        return ConversationHandler.END
    else:  # –ò—Å–ø—Ä–∞–≤–∏—Ç—å
        keyboard = [
            ['üìç –ì–æ—Ä–æ–¥', 'üöó –ú–∞—Ä–∫–∞', 'üöô –ú–æ–¥–µ–ª—å'],
            ['üìÖ –ì–æ–¥', 'üî¢ –≤–∏–Ω/–î–≤–∏–≥–∞—Ç–µ–ª—å'],
            ['üîß –ó–∞–ø—á–∞—Å—Ç–∏', 'üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
            ['‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–≤–æ–¥–∫–µ']
        ]
        await update.message.reply_text(
            "‚úèÔ∏è *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?*",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return EDIT_CHOICE

async def handle_edit_choice(update: Update, context: CallbackContext):
    choice = update.message.text
    
    if choice == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–≤–æ–¥–∫–µ':
        return await show_summary(update, context)
    elif choice == 'üìç –ì–æ—Ä–æ–¥':
        context.user_data['editing'] = True
        await update.message.reply_text("üìç *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:*", parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        return CITY
    elif choice == 'üöó –ú–∞—Ä–∫–∞':
        context.user_data['editing'] = True
        await update.message.reply_text("üöó *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞—Ä–∫—É:*", parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        return CAR_BRAND
    elif choice == 'üöô –ú–æ–¥–µ–ª—å':
        context.user_data['editing'] = True
        await update.message.reply_text("üöô *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å:*", parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        return CAR_MODEL
    elif choice == 'üìÖ –ì–æ–¥':
        context.user_data['editing'] = True
        await update.message.reply_text("üìÖ *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ–¥:*", parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        return CAR_YEAR
    elif choice == 'üî¢ –≤–∏–Ω/–î–≤–∏–≥–∞—Ç–µ–ª—å':
        context.user_data['editing'] = True
        context.user_data.pop('vin_text', None)
        context.user_data.pop('vin_photo', None)
        context.user_data.pop('engine_volume', None)
        context.user_data.pop('fuel_type', None)
        context.user_data.pop('vin_skipped', None)
        
        keyboard = [
            ['üìù –í–≤–µ—Å—Ç–∏ –≤–∏–Ω/—Å—Ç—Å –≤—Ä—É—á–Ω—É—é', 'üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –≤–∏–Ω/—Å—Ç—Å'],
            ['üöÄ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
        ]
        await update.message.reply_text(
            "üî¢ *–£–∫–∞–∂–∏—Ç–µ –≤–∏–Ω –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Å:*",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return VIN_OR_STS
    elif choice == 'üîß –ó–∞–ø—á–∞—Å—Ç–∏':
        context.user_data['editing'] = True
        context.user_data['parts'] = []
        await update.message.reply_text("üîß *–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—á–∞—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ:*", parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        return PART_MAIN
    elif choice == 'üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        context.user_data['editing'] = True
        await update.message.reply_text("üìã *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*\n–ò–º—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω +79165133244", 
                                      parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        return CONTACT_INFO

async def cancel(update: Update, context: CallbackContext):
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    user_id = update.effective_user.id
    if user_id in user_reminders:
        for task in user_reminders[user_id]:
            task.cancel()
        del user_reminders[user_id]
    
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def error_handler(update: Update, context: CallbackContext):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º Application –≤–º–µ—Å—Ç–æ Updater
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
            CAR_BRAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car_brand)],
            CAR_MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car_model)],
            CAR_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car_year)],
            VIN_OR_STS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vin_choice),
                MessageHandler(filters.PHOTO, handle_vin_photo)
            ],
            VIN_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_vin_text)],
            ENGINE_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_engine_volume)],
            ENGINE_FUEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fuel_type)],
            PART_MAIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_part_main)],
            PART_REFINEMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_part_refinement)],
            PART_SPECIFICS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_part_specifics)],
            PART_PHOTO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_part_photo),
                MessageHandler(filters.PHOTO, handle_part_photo)
            ],
            MORE_PARTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_more_parts)],
            CONTACT_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact_info)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirmation)],
            EDIT_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_choice)],
        },
        fallbacks=[
            CommandHandler('start', start),
            CommandHandler('cancel', cancel)
        ]
    )
    
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç '–ê–≤—Ç–æ–ó–∞–ø—á–∞—Å—Ç–∏ 24/7' –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
